/*
 * rt3 subproject (model interpreter runtime to test our ideas).
 */

plugins {
    id 'java-library'
    id 'jvm-test-suite'
}

// Our locally-rolled class-generator (generates support for dy3bm)
import uk.co.farowl.vsj3.generate.evo1.DynamicAPIevo1Task


// dependencies {}


// Configure the jvm-test-suite plug-in
testing {
    suites {
        test {
            useJUnitJupiter() 
        }
    }
}


// Sources and destinations when generating Java object implementations

def genSourcesDir = "$buildDir/generated/sources"

def javaTemplateOutputDir = "$genSourcesDir/javaTemplate"
def javaTemplateOutputMain = "$javaTemplateOutputDir/java/main"
def javaTemplateOutputTest = "$javaTemplateOutputDir/java/test"
def javaTemplateInputMain = getProject().file('src/main/javaTemplate')
def javaTemplateInputTest = getProject().file('src/test/javaTemplate')

def asdlOutputDir = "$genSourcesDir/asdl"
def asdlOutputMain = "$asdlOutputDir/java/main"
def asdlInputMain = getProject().file('src/main/asdl')

def pegenOutputDir = "$genSourcesDir/pegen"
def pegenOutputMain = "$pegenOutputDir/java/main"
def pegenInputMain = getProject().file('src/main/pegen')

def astPackage = 'uk.co.farowl.vsj3.evo1.ast'

// Source and destinations of Python source test material

// We compile these to code objects to test the CPython interpreter.
def testPythonExampleInputDir = getProject().file('src/test/pythonExample')

def pythonExampleOutput = "$buildDir/generated/sources/pythonExample"
def testPythonExampleOutputDir = "$pythonExampleOutput/test"


sourceSets {

    main {
        java {
            srcDir javaTemplateOutputMain
            srcDir asdlOutputMain
            srcDir pegenOutputMain
        }
    }

    test {
        java {
            srcDir javaTemplateOutputTest
        }
        resources {
            srcDir testPythonExampleOutputDir
        }
    }
}



// A task that runs Python with the tools library on the path

class PythonExec extends Exec {

    PythonExec() {
        executable 'python'
        environment('PYTHONPATH', getProject().file('tools/python/lib'))
    }
}


// Generate Python object definitions

task generateJavaEvo1(type: PythonExec,
        description: 'Generate object definitions from templates' ) {
    args getProject().file('tools/python/vsj3evo1/java_object_gen.py')
    args '--verbose'
    args javaTemplateInputMain
    args javaTemplateOutputMain
}
compileJava.dependsOn(generateJavaEvo1)


// Report the version of Python available

task pythonVersion(type: PythonExec) {
    args '-V'
}
generateJavaEvo1.dependsOn(pythonVersion)


// Copy and compile Python source examples to the build tree

task compileTestPythonExamples(type: PythonExec,
        description: 'Copy and compile Python test examples') {
    // Clues for the incremental build
    inputs.files(
        fileTree(testPythonExampleInputDir) {
            include '**/*.py'
        })
    outputs.dir(testPythonExampleOutputDir)
    // Exec task is python -m compile_examples <src> <dst>
    args '-m', 'compile_examples'
    args testPythonExampleInputDir
    args testPythonExampleOutputDir
}
processTestResources.dependsOn(compileTestPythonExamples)


// Generate Python AST sources to the build tree

task generatePythonAST(type: PythonExec,
        description: 'Generate Python AST sources') {
    // Clues for the incremental build
    inputs.files("$asdlInputMain/Python.asdl")
    outputs.dir(asdlOutputDir)
    // python -m asdl_java [-a AST_PACKAGE] [input_file] [output_dir]
    args '-m', 'asdl_java'
    args '--core-package', 'uk.co.farowl.vsj3.evo1'
    args '--ast-package', astPackage
    args "$asdlInputMain/Python.asdl"
    args asdlOutputMain
}


// Generate Python Parser source (and some further AST classes)

task generatePythonParser(type: PythonExec,
        description: 'Generate Python parser sources') {
    // Clues for the incremental build
    inputs.files(
        fileTree(asdlOutputMain) {
            include '**/*.java'
        })
    outputs.dir(asdlOutputDir)
    // python -m pegen_main java [input_file] [output_dir]
    args '-m', 'pegen_main', 'java'
    args '--c-files', "$pegenInputMain/cfiles"
    args '--core-package', 'uk.co.farowl.vsj3.evo1'
    args '--ast-package', astPackage
    args '--parser-package', 'uk.co.farowl.vsj3.evo1.parser'
    args '--type-map', "$asdlOutputMain/.c_java_type_cache"
    args "$pegenInputMain/python.gram"
    args pegenOutputMain
}
generatePythonParser.dependsOn(generatePythonAST)
compileJava.dependsOn(generatePythonParser)


// Generate (selected) Python abstract object API members
// Task defined in root buildSrc
task generateDynamicAPIevo1(type: DynamicAPIevo1Task) {
    dependsOn(compileJava)
    source = "src/main/dynamicAPI"
    // Mix output into Java plugin directory :(
    destinationDirectory = file("$buildDir/classes/java/main")
    // Must be set but not actually consulted :(
    classpath = layout.files("$buildDir/classes/java/main")
}
classes.dependsOn(generateDynamicAPIevo1)


// Task to generate javadoc for test code
task testJavadoc(type:Javadoc,
        description: 'Generate Javadoc for tests',
        dependsOn:javadoc ) {
    source = sourceSets.test.allJava
    classpath = sourceSets.test.compileClasspath
    //println "testJavadoc.classpath = $classpath.asPath"

    // rt3 API javadoc already at ${buildDir}/docs/javadoc
    title = "rt3 Unit Tests"
    destinationDir = file("${buildDir}/docs/unittests")

    // We want to click though to the objects under test
    options.links.add("../javadoc")
}


// Some adjustments to Javadoc to ensure complex tables readable

tasks.withType(Javadoc) {

    options.showFromPackage()
    options.encoding = 'UTF-8'

    // addStringOption inserts one "-" for us :/
    // CSS adjustments (initially only for table style)
    options.addStringOption("-add-stylesheet",
        "src/main/javadoc/project-styles.css")

    // Enable "custom" tags used in JDK Javadoc since JSR-335.
    // https://nipafx.dev/javadoc-tags-apiNote-implSpec-implNote
    options.tags(
        "apiNote:a:API Note:",
        "implSpec:a:Implementation Requirements:",
        "implNote:a:Implementation Note:",
        // Unfortunately we must add these standard tags too,
        // so they come after the ones we want to enable.
        "param", "return", "throws",
        "since", "version", "serialData", "see")
}


tasks.withType(JavaCompile) {

    options.encoding = 'UTF-8'

    // Use only public API
    options.compilerArgs.addAll(['--release', '17'])
    // deprecation is noisy
    options.deprecation = true
    // retain parameter names (for use by exposer)
    options.compilerArgs.add('-parameters')
}


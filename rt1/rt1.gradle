/*
 * rt1 subproject (model interpreter runtime to test our ideas).
 *
 */

plugins {
    id 'java'
    id 'antlr'
    id 'uk.co.farowl.asdl.compiler'
    id 'jvm-test-suite'
}

dependencies {
    antlr "org.antlr:antlr4:4.7" // use ANTLR version 4
}

// Import the plug-in task so we can use it as a task type.
import uk.co.farowl.asdl.gradle.ASDLTask


def generatedAsdl = "$buildDir/generated-src/asdl"

sourceSets {
    main {
        java {
            srcDir "$generatedAsdl/main"
        }
    }
    test {
        java {
            srcDir "$generatedAsdl/test"
            srcDir "$generatedAsdl/test-ex"
        }
    }
}

testing {
    suites {
        test {
            useJUnitJupiter() 
        }
    }
}

generateGrammarSource {
    arguments += ["-visitor"]
}

// Generate TreePython.java from TreePython.asdl via specialised group file.
generateDataModel {
    /*
     * All nodes extend ExecNode, which contains the 'site' member in support of
     * using a per-node CallSite.
     */
    params = ["useEnum" : true, "enumIsNode" : false, "base" : "ExecNode"]
}

// Data model used in TestEx1 to TestEx4 in test corpus (default template)
task('generateTestEx1DataModel', type: ASDLTask) {
    source = "src/test/asdl"
    include "**/TreePythonEx1.asdl"
    params = ["useEnum" : true, "enumIsNode" : false]
    outputDirectory = "$generatedAsdl/test-ex"
}

// Data model used in TestEx5 to TestEx8 in test corpus (ExecNodeEx5 base)
task('generateTestEx5DataModel', type: ASDLTask) {
    source = "src/test/asdl"
    include "**/TreePythonEx5.asdl"
    include "**/TreePythonEx6.asdl"
    params = ["useEnum" : true, "enumIsNode" : false, "base" : "ExecNodeEx5"]
    outputDirectory = "$generatedAsdl/test-ex"
}

// Manually insert the dependency of compilation on generation
compileJava {
    dependsOn generateDataModel
}

compileTestJava {
    dependsOn generateTestEx1DataModel
    dependsOn generateTestEx5DataModel
}


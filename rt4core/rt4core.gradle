/*
 * rt4core subproject (model interpreter runtime).
 */

import org.gradle.internal.jvm.JavaModuleDetector
import org.gradle.api.internal.tasks.compile.CompilationSourceDirs

plugins {
    id 'java-library'
    id 'jvm-test-suite'
}


java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}


repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}


dependencies {
    // We generate byte code with ASM
    implementation 'org.ow2.asm:asm:9.7'
    implementation 'org.ow2.asm:asm-tree:9.7'
    // We standardise on SLF4J for logging from the library
    implementation 'org.slf4j:slf4j-api:2.0.13'
}


// Configure the jvm-test-suite plug-in
testing {
    suites {
        // The pre-defined test suite.
        test {
            useJUnitJupiter()
            dependencies {
                // Include a logging provider (JDK 1.4)
                runtimeOnly 'org.slf4j:slf4j-jdk14:2.0.13'
            }

            targets {
                all {
                    testTask.configure {
                        // Log output will show when kernel is re-used
                        systemProperty(
                            'java.util.logging.config.file',
                            getProject().file('config/test.logging.properties') )
                        testLogging.showStandardStreams = true
                    }
                }
            }
        }

        /*
         * A test suite where each test runs in its own JVM.
         * We follow the Gradle 8.8 notes on the JVM Test Suite Plugin.
         * and the example of configuring integration tests.
         */
        kernelTest(JvmTestSuite) {
            useJUnitJupiter()

            dependencies {
                implementation project()
                implementation 'org.slf4j:slf4j-api:2.0.13'
                // Include a logging provider (JDK 1.4)
                runtimeOnly 'org.slf4j:slf4j-jdk14:2.0.13'
            }

            targets {
                all {
                    testTask.configure {
                        // Important: fresh JVM with every kernel test
                        forkEvery = 1
                        // Log output will prove kernel is recreated
                        systemProperty(
                            'java.util.logging.config.file',
                            getProject().file('config/kernelTest.logging.properties') )
                        systemProperty(
                            'uk.co.farowl.vsj4.runtime.BootstrapTest.times',
                            'false')
                        testLogging.showStandardStreams = true
                    }
                }
            }
        }
    }
}

test.dependsOn(kernelTest)


tasks.named('check') { 
    dependsOn(testing.suites.kernelTest)
}


// Sources and destinations when generating Java object implementations

def genSourcesDir = "$buildDir/generated/sources"
def genOutputDir = "$genSourcesDir/javaTemplate"
def genJavaDir = "$genOutputDir/java/main"
def genTestJavaDir = "$genOutputDir/java/test"

def genInputDir = getProject().file('src/main/javaTemplate')
def genTestInputDir = getProject().file('src/test/javaTemplate')


// Source and destinations of Python source test material

// We compile these to code objects to test the CPython interpreter.
def testPythonExampleInputDir = getProject().file('src/test/pythonExample')

def pythonExampleOutput = "$buildDir/generated/sources/pythonExample"
def testPythonExampleOutputDir = "$pythonExampleOutput/test"


sourceSets {

    main {
        java {
            srcDir genJavaDir
        }
    }

    test {
        java {
            srcDir genTestJavaDir
        }
        resources {
            srcDir testPythonExampleOutputDir
        }
    }
}


// A class of task that runs Python with the tools library on the path

class PythonExec extends Exec {

    PythonExec() {
        executable 'python'
        environment('PYTHONPATH', getProject().file('tools/python/lib'))
    }
}


// Report the version of Python available

task pythonVersion(type: PythonExec) {
    args '-V'
}


// Generate Python object definitions

task generateJava(type: PythonExec,
        description: 'Generate object definitions from templates',
        dependsOn: pythonVersion) {
    args getProject().file('tools/python/java_object_gen.py')
    args '--verbose'
    args genInputDir
    args genJavaDir
}
compileJava.dependsOn(generateJava)


// Copy and compile Python source examples to the build tree

//task compileTestPythonExamples(type: PythonExec,
//        description: 'Copy and compile Python test examples') {
//    // Clues for the incremental build
//    inputs.files(
//        fileTree(testPythonExampleInputDir) {
//            include '**/*.py'
//        })
//    outputs.dir(testPythonExampleOutputDir)
//    // Exec task is python -m compile_examples <src> <dst>
//    args '-m'
//    args 'compile_examples'
//    args testPythonExampleInputDir
//    args testPythonExampleOutputDir
//}
//processTestResources.dependsOn(compileTestPythonExamples)


// Default javadoc (but it does not properly constrain visibility)
javadoc {
    title = "rt4core Default Javadoc (not modular)"
    options.addStringOption("-show-packages", "exported")
    options.addStringOption("-show-module-contents", "api")
    options.showFromProtected()
}


// Task to generate javadoc for the module API (that client apps use).
// Using an Exec task because we failed to make a Javadoc task work.
task moduleJavadoc(type:Exec,
        description: 'Generate Javadoc for Client API (Exec task)',
        dependsOn: generateJava) {

    inputs.files(sourceSets.main.allJava)
    executable = "javadoc"

    def title = 'rt4core Client API'
    args('-doctitle', title)
    args('-windowtitle', title)

    // These particular docs are characterised by:
    args('--show-module-contents', 'api')
    args('--show-packages', 'exported')
    args('-d', "${buildDir}/docs/api")

    // The module and source paths are specified here
    args("@src/main/javadoc/modular.options")

    //println "Exec javadoc $args"
}


// Task to generate javadoc for the module API (that client apps use)
// Something like this should work but it fails in the javadoc command.
task brokenModuleJavadoc(type:Javadoc,
        description: 'Generate Javadoc for module API (broken)',
        dependsOn: generateJava) {
    source = sourceSets.main.allJava
    title = "rt4core Client API (broken)"
    destinationDir = file("${buildDir}/docs/broken-api")

    def ccp = sourceSets.main.compileClasspath
    //println "ccp.files = ${ccp.files}"
    //classpath.from(ccp)

    //modularity.inferModulePath = false
    options.modulePath(new ArrayList(ccp.files))
    println "options.modulePath = ${options.modulePath}"

    // addStringOption adds a "-" for us so "--module" is spelled:
    // options.addStringOption("-module", ... )
    options.addStringOption("-module", "uk.co.farowl.rt4core")
    options.addStringOption("-show-packages", "exported")
    options.addStringOption("-show-module-contents", "api")

    FileCollection roots = layout.files(
            CompilationSourceDirs.inferSourceRoots(source))
    println "rootsPath = ${roots.asPath}"

    options.addStringOption("-source-path", roots.asPath)
}


// Task to generate javadoc for project maintainers
// Using an Exec task because we failed to make a Javadoc task work.
task internalJavadoc(type:Exec,
        description: 'Generate project internal Javadoc',
        dependsOn: generateJava) {

    inputs.files(sourceSets.main.allJava)
    executable = "javadoc"

    def title = 'rt4core Project Internal Javadoc'
    args('-doctitle', title)
    args('-windowtitle', title)

    // These particular docs are characterised by:
    args('--show-module-contents', 'all')
    args('--show-packages', 'all')
    args('--show-members', 'package')
    args('--show-types', 'package')
    args('-d', "${buildDir}/docs/internalJavadoc")

    // The module and source paths are specified here
    args("@src/main/javadoc/modular.options")

    //println "Exec javadoc $args"
}


// Task to generate javadoc for project maintainers (down to private)
// Something like this should work but it fails in the javadoc command.
task brokenInternalJavadoc(type:Javadoc,
        description: 'Generate project internal Javadoc (broken)',
        dependsOn: generateJava) {

    source(sourceSets.main.allJava)
    title = "rt4core Project Internal Javadoc (broken)"
    destinationDir = file("${buildDir}/docs/brokenInternalJavadoc")

    // Work around poor handling of modules in Gradle
    // Possibly https://github.com/gradle/gradle/issues/25954
    def ccp = sourceSets.main.compileClasspath
    // modularity.inferModulePath = false
    options.modulePath(new ArrayList(ccp.files))
    println "options.modulePath = ${options.modulePath}"
    options.addStringOption("-module", "uk.co.farowl.rt4core")

    options.showFromPackage()
    //options.showFromPrivate()

    FileCollection roots = layout.files(
            CompilationSourceDirs.inferSourceRoots(source))
    println "rootsPath = ${roots.asPath}"

    options.addStringOption("-source-path", roots.asPath)
}


// Task to generate javadoc for test code
task testJavadoc(type:Javadoc,
        description: 'Generate Javadoc for tests',
        dependsOn: internalJavadoc) {

    source(sourceSets.test.allJava, sourceSets.kernelTest.allJava)
    title = "rt4core Unit Tests"
    destinationDir = file("${buildDir}/docs/testJavadoc")

    // Ensure the test support (JUnit) is on the class path
    def tccp = sourceSets.test.compileClasspath
    //println "tccp.files = ${tccp.files}"

    classpath.from(tccp)

    /* We have used the class path not the module path because
     * otherwise javadoc complains the JUnit API is not in the
     * module graph (not in module-info.java) and fails badly.
     * This way we get non-modular Javadoc for the tests :( and
     * a warning about linked classes in the same package being
     * modular, but it is only a warning.
     */
    //modularity.inferModulePath = false
    //options.modulePath(new ArrayList(tccp.files))
    //println "options.modulePath = ${options.modulePath}"

    options.showFromPackage()

    // rt4 internal javadoc already at ${buildDir}/docs
    // We want to click through to the objects under test
    options.links.add("../internalJavadoc")
}


// Some adjustments to Javadoc to ensure complex tables readable

tasks.withType(Javadoc) {

    options.encoding = 'UTF-8'

    // addStringOption inserts one "-" for us :/
    // CSS adjustments (initially only for table style)
    options.addStringOption("-add-stylesheet",
        "src/main/javadoc/project-styles.css")

    // Enable "custom" tags used in JDK Javadoc since JSR-335.
    // https://nipafx.dev/javadoc-tags-apiNote-implSpec-implNote
    options.tags(
        "apiNote:a:API Note:",
        "implSpec:a:Implementation Requirements:",
        "implNote:a:Implementation Note:",
        // Unfortunately we must add these standard tags too,
        // so they come after the ones we want to enable.
        "param", "return", "throws",
        "since", "version", "serialData", "see")

    doFirst {
        // A bit of reassurance: this was hard to get right
        println "inferModulePath = ${modularity.inferModulePath.getOrNull()}"
        println "module path = ${options.modulePath}"
        //println "source path = ${source.files}"
        FileCollection roots = layout.files(CompilationSourceDirs.inferSourceRoots(source))
        println "roots.files = ${roots.files}"
    }
}


tasks.withType(JavaCompile) {

    options.encoding = 'UTF-8'

    // Use only public API
    options.compilerArgs.addAll(['--release', '17'])
    // Deprecation is noisy
    options.deprecation = true
    // Retain parameter names (for use by exposer)
    // The IDE may have a compiler setting necessary for the exposer:
    // "Store information about method parameters"
    options.compilerArgs.add('-parameters')
}

